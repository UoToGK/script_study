{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# -*- coding: utf-8 -*-\n",
        "# Created : 2018/8/26 18:33\n",
        "# author ：GuoLi\n",
        " \n",
        "import requests\n",
        "import json\n",
        "import time\n",
        "from lxml import etree\n",
        "import html\n",
        "import re\n",
        "from bs4 import BeautifulSoup\n",
        " \n",
        " \n",
        "class Weibospider:\n",
        "    def __init__(self):\n",
        "        # 获取首页的相关信息：\n",
        "        self.start_url = 'https://weibo.com/u/5644764907?page=1&is_all=1'\n",
        " \n",
        "        self.headers = {\n",
        "            \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n",
        "            \"accept-encoding\": \"gzip, deflate, br\",\n",
        "            \"accept-language\": \"zh-CN,zh;q=0.9,en;q=0.8\",\n",
        "            \"cache-control\": \"max-age=0\",\n",
        "            \"cookie\": \"\",# 此处填入自己的cookie\n",
        "            \"referer\": \"https://www.weibo.com/u/5644764907?topnav=1&wvr=6&topsug=1\",\n",
        "            # https://s.weibo.com/weibo/%E4%BA%BA%E6%B0%91%E6%97%A5%E6%8A%A5?topnav=1&wvr=6&topsug=1\n",
        "            \"upgrade-insecure-requests\": \"1\",\n",
        "            \"user-agent\": \"\", #此处填入自己的User agent\n",
        "        }\n",
        "        self.proxy = {\n",
        "            #此处填入自己的proxy\n",
        "        }\n",
        " \n",
        "    def parse_home_url(self, url):  # 处理解析首页面的详细信息（不包括两个通过ajax获取到的页面）\n",
        "        res = requests.get(url, headers=self.headers)\n",
        "        response = res.content.decode().replace(\"\\\\\", \"\")\n",
        "        # every_url = re.compile('target=\"_blank\" href=\"(/\\d+/\\w+\\?from=\\w+&wvr=6&mod=weibotime)\"', re.S).findall(response)\n",
        "        every_id = re.compile('name=(\\d+)', re.S).findall(response)  # 获取次级页面需要的id\n",
        "        home_url = []\n",
        "        for id in every_id:\n",
        "            base_url = 'https://weibo.com/aj/v6/comment/big?ajwvr=6&id={}&from=singleWeiBo'\n",
        "            #           https://weibo.com/aj/v6/comment/big?ajwvr=6&id=4375226604955403&root_comment_max_id=913579016927848&root_comment_max_id_type=0&root_comment_ext_param=&page=2&filter=hot&sum_comment_number=6978&filter_tips_before=0&from=singleWeiBo&__rnd=1580371869678\n",
        "            url = base_url.format(id)\n",
        "            home_url.append(url)\n",
        "        return home_url\n",
        " \n",
        "    def parse_comment_info(self, url):  # 爬取直接发表评论的人的相关信息(name,info,time,info_url)\n",
        "        res = requests.get(url, headers=self.headers)\n",
        "        response = res.json()\n",
        "        count = response['data']['count']\n",
        "        html = etree.HTML(response['data']['html'])\n",
        "        name = html.xpath(\"//div[@class='list_li S_line1 clearfix']/div[@class='WB_face W_fl']/a/img/@alt\")  # 评论人的姓名\n",
        "        info = html.xpath(\"//div[@node-type='replywrap']/div[@class='WB_text']/text()\")  # 评论信息\n",
        "        info = \"\".join(info).replace(\" \", \"\").split(\"\\n\")\n",
        "        info.pop(0)\n",
        "        comment_time = html.xpath(\"//div[@class='WB_from S_txt2']/text()\")  # 评论时间\n",
        "        name_url = html.xpath(\"//div[@class='WB_face W_fl']/a/@href\")  # 评论人的url\n",
        "        name_url = [\"https:\" + i for i in name_url]\n",
        "        comment_info_list = []\n",
        "        for i in range(len(name)):\n",
        "            item = {}\n",
        "            item[\"name\"] = name[i]  # 存储评论人的网名\n",
        "            item[\"comment_info\"] = info[i]  # 存储评论的信息\n",
        "            item[\"comment_time\"] = comment_time[i]  # 存储评论时间\n",
        "            item[\"comment_url\"] = name_url[i]  # 存储评论人的相关主页\n",
        "            comment_info_list.append(item)\n",
        "        return count, comment_info_list\n",
        " \n",
        "    def write_file(self, path_name, content_list):\n",
        "        for content in content_list:\n",
        "            with open(path_name, \"a\", encoding=\"UTF-8\") as f:\n",
        "                f.write(json.dumps(content, ensure_ascii=False))\n",
        "                f.write(\"\\n\")\n",
        " \n",
        "    def run(self):\n",
        "        start_url = 'https://weibo.com/u/5644764907?page={}&is_all=1'\n",
        "        start_ajax_url1 = 'https://weibo.com/p/aj/v6/mblog/mbloglist?ajwvr=6&domain=100406&is_all=1&page={0}&pagebar=0&pl_name=Pl_Official_MyProfileFeed__20&id=1004065644764907&script_uri=/u/5644764907&pre_page={0}'\n",
        "                        # https://weibo.com/p/aj/v6/mblog/mbloglist?ajwvr=6&domain=100406&page=1&is_all=1&pagebar=0&pl_name=Pl_Official_MyProfileFeed__20&id=1004065644764907&script_uri=/u/5644764907&feed_type=0&pre_page=1&domain_op=100406&__rnd=1580360591628\n",
        "                        # https://weibo.com/p/aj/v6/mblog/mbloglist?ajwvr=6&domain=100406&profile_ftype=1&is_all=1&pagebar=0&pl_name=Pl_Official_MyProfileFeed__20&id=1004065644764907&script_uri=/p/1004065644764907/home&feed_type=0&page=1&pre_page=1&domain_op=100406&__rnd=1580372698884\n",
        "        start_ajax_url2 = 'https://weibo.com/p/aj/v6/mblog/mbloglist?ajwvr=6&domain=100406&is_all=1&page={0}&pagebar=1&pl_name=Pl_Official_MyProfileFeed__20&id=1004065644764907&script_uri=/u/5644764907&pre_page={0}'\n",
        "        for i in range(12):  # 微博共有12页\n",
        "            home_url = self.parse_home_url(start_url.format(i + 1))  # 获取每一页的微博\n",
        "            ajax_url1 = self.parse_home_url(start_ajax_url1.format(i + 1))  # ajax加载页面的微博\n",
        "            ajax_url2 = self.parse_home_url(start_ajax_url2.format(i + 1))  # ajax第二页加载页面的微博\n",
        "            all_url = home_url + ajax_url1 + ajax_url2\n",
        "            print(home_url)\n",
        "            print(ajax_url1)\n",
        "            print(ajax_url2)\n",
        "            print(all_url)\n",
        "            for j in range(len(all_url)):\n",
        "                #print(all_url[j])\n",
        "                path_name = \"第{}条微博相关评论.txt\".format(i * 45 + j + 1)\n",
        "                all_count, comment_info_list = self.parse_comment_info(all_url[j])\n",
        "                self.write_file(path_name, comment_info_list)\n",
        "                for num in range(1, 10000):\n",
        "                    if num * 15 < int(all_count) + 15:\n",
        "                        comment_url = all_url[j] + \"&page={}\".format(num + 1)\n",
        "                        print(comment_url)\n",
        "                        try:\n",
        "                            count, comment_info_list = self.parse_comment_info(comment_url)\n",
        "                            self.write_file(path_name, comment_info_list)\n",
        "                        except Exception as e:\n",
        "                            print(\"Error:\", e)\n",
        "                            time.sleep(60)\n",
        "                            count, comment_info_list = self.parse_comment_info(comment_url)\n",
        "                            self.write_file(path_name, comment_info_list)\n",
        "                        del count\n",
        "                        time.sleep(5)\n",
        " \n",
        "                print(\"第{}微博信息获取完成！\".format(i * 45 + j + 1))\n",
        " \n",
        " \n",
        "if __name__ == '__main__':\n",
        "    weibo = Weibospider()\n",
        "    weibo.run()\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
